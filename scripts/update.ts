import { writeFile } from "node:fs/promises";
import { resolve } from "node:path";
import version from "../packages/tailwindcss-material-symbols/version.json";
import { downloadMaterialSymbols, fetchCodepoints } from "./download";

export const GITHUB_API_VERSION = "2022-11-28";
export const LAST_COMMIT_URL =
  "https://api.github.com/repos/google/material-design-icons/commits/master";

export const VERSION_PATH = "../packages/tailwindcss-material-symbols/version.json";
export const GENERATED_DIR = "../packages/tailwindcss-material-symbols/src/generated";
export const CODEPOINTS_TS = "codepoints.ts";
export const CODEPOINTS_CSS = "codepoints.css";

export async function getLatestCommit(): Promise<string> {
  const response = await fetch(LAST_COMMIT_URL, {
    headers: { Accept: "application/vnd.github.sha", "X-GitHub-Api-Version": GITHUB_API_VERSION },
  });
  if (!response.ok) {
    throw new Error(`Failed to fetch latest commit: ${response.status} ${response.statusText}`);
  }
  const hash = await response.text();
  if (!/^[a-f0-9]{40}$/.test(hash)) throw new Error(`Invalid commit hash received: ${hash}`);
  return hash;
}

export async function updateCodepoints(commit: string) {
  const codepoints = await fetchCodepoints(commit);
  {
    const tsPath = resolve(import.meta.dirname, GENERATED_DIR, CODEPOINTS_TS);
    let code = "/* Auto-generated by scripts/update.ts. Do not edit manually. */\n\n";
    code += "// prettier-ignore\n";
    code += "const codepoints = {\n";
    for (const [name, codepoint] of Object.entries(codepoints))
      code += `  "${name}": "\\u${codepoint}",\n`;
    code += "} as const;\n\n";
    code += "export default codepoints;\n";
    await writeFile(tsPath, code);
  }
  {
    const cssPath = resolve(import.meta.dirname, GENERATED_DIR, CODEPOINTS_CSS);
    let code = "/* Auto-generated by scripts/update.ts. Do not edit manually. */\n\n";
    code += "@theme {\n";
    for (const [name, codepoint] of Object.entries(codepoints))
      code += `  --icon-symbol-${name}: "\\${codepoint}";\n`;
    code += "}\n";
    await writeFile(cssPath, code);
  }
}

if (import.meta.main) {
  const commit = await getLatestCommit();

  if (process.env.FORCE_UPDATE !== "1" && commit === version.commit) {
    console.log("Material Symbols are already up to date.");
    process.exit(0);
  }

  console.log("Downloading latest fonts...");
  const hashes = await downloadMaterialSymbols(commit);

  console.log("Updating codepoints...");
  await updateCodepoints(commit);

  const newVersion = { commit, hashes };
  const versionPath = resolve(import.meta.dirname, VERSION_PATH);
  await writeFile(versionPath, JSON.stringify(newVersion, null, 2) + "\n");

  console.log(`Updated Material Symbols to commit ${commit}.`);
}
